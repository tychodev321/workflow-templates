name: Deploy FastAPI API
on: 
  workflow_call:
    inputs:
      environments: # ['dev','test','acpt','prod']
        description: 'The environment the deployment is for.'
        required: false
        default: "['acpt']"
        type: string
      regions: # ['us-east-1','us-west-2']
        description: 'The region the deployment is for.'
        required: false
        default: "['us-east-1']"
        type: string
      app-base-dir:
        description: 'The App Base Directory.'
        required: false
        default: 'app'
        type: string
      infra-base-dir:
        description: 'The Infra Base Directory.'
        required: false
        default: 'infra'
        type: string
      upload-test-results:
        description: 'Whether to upload test results or not.'
        required: false
        default: 'false'
        type: string
      run-bdd-test:
        description: 'Whether to run BDD Tests or not.'
        required: false
        default: 'false'
        type: string
      app-dockerfile:
        description: 'The App Dockerfile.'
        required: false
        default: 'app/Dockerfile'
        type: string
      deploy:
        description: 'Whether to deploy or not.'
        required: false
        default: 'true'
        type: string
      destroy:
        description: 'Whether to destroy or not.'
        required: false
        default: 'false'
        type: string
    outputs:
      result:
        description: The result of the deployment operation
        value: ${{ jobs.build.outputs.outcome }}

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # sast-codeql:
  #   continue-on-error: true
  #   runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
  #   timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ $detected-codeql-languages ]
  #   steps:
  #     - name: Run Scan
  #       uses: tychodev321/workflow-templates/.github/actions/codeql@main
  #       with:
  #         language: ${{ matrix.language }}
  build:
    # needs: [sast-codeql]
    continue-on-error: true # TODO: Remove this when this is fixed
    outputs:
      outcome: ${{ steps.set-result.outputs.step-result }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tychodev321/ubuntu-python:main
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Github Actions Deploy Keys
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key:  |
            ${{ secrets.TYCHODEV_COMMONS_DEPLOY_KEY }}
      - name: Run Build
        uses: tychodev321/workflow-templates/.github/actions/build-python@main
        with:
          app-base-dir: ${{ inputs.app-base-dir }}
          upload-test-results: ${{ inputs.upload-test-results }}
          run-bdd-test: ${{ inputs.run-bdd-test }}
          caching: 'true'
          tycho-commons-deploy-key: ${{ secrets.TYCHODEV_COMMONS_DEPLOY_KEY }}
      - name: Set result output
        id: set-result
        run: echo "step-result=success" >> $GITHUB_OUTPUT
  build_image: # TODO: Integrate with Container Custom Action
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Build Image
        run: |
          echo "Bulding Image..."
  deploy: # TODO: Integrate with Pulumi Custom Action
    if: inputs.deploy == 'true'
    needs: [build_image]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(inputs.environments) }}
        region: ${{ fromJson(inputs.regions) }}
    steps:
      - name: Deploy
        run: |
          echo "Deploying..."
          echo "${{ matrix.environment }}"
          echo "${{ matrix.region }}"
  destroy: # TODO: Integrate with Pulumi Custom Action
    if: inputs.destroy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(inputs.environments) }}
        region: ${{ fromJson(inputs.regions) }}
    steps:
      - name: Destroy
        run: |
          echo "Destroying..."
          echo "${{ matrix.environment }}"
          echo "${{ matrix.region }}"